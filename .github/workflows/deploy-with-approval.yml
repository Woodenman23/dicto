name: Deploy with Approval

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: woodenman23/dicto

jobs:
  build-and-deploy-staging:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Pull the latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # Stop and remove existing staging container
            docker stop dicto-app-staging || true
            docker rm dicto-app-staging || true

            # Run new staging container
            docker run -d \
              --name dicto-app-staging \
              --restart unless-stopped \
              -p 6003:8080 \
              -e BASE_PATH=/dicto-staging \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Staging deployment complete
        run: |
          echo "üöÄ Staging deployment complete!"
          echo "‚è≥ Waiting for production approval..."

  await-approval:
    name: "üîç Test https://josephfoster.me/dicto-staging then approve"
    needs: build-and-deploy-staging
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Production approved
        run: echo "‚úÖ Production deployment approved!"

  promote-to-production:
    needs: await-approval
    runs-on: ubuntu-latest

    steps:
      - name: Promote to production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Tag current production as backup (if exists)
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:backup || true

            # Stop and remove existing production container
            docker stop dicto || true
            docker rm dicto || true

            # Stop and remove staging container
            docker stop dicto-app-staging || true
            docker rm dicto-app-staging || true

            # Run production container using the same image that was tested in staging
            docker run -d \
              --name dicto \
              --restart unless-stopped \
              -p 5003:8080 \
              -e BASE_PATH=/dicto \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # Clean up old images (keep backup)
            docker image prune -a

      - name: Production deployment complete
        run: |
          echo "üéâ Production deployment complete!"
          echo "üåê Your app is live at: https://josephfoster.me/dicto"
          echo "üíæ Previous version saved as backup for rollback if needed"
